name: Backend CI/CD

on:
  push:
    branches: [ main ]
    paths: [ 'backend/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'backend/**' ]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.12]
    defaults:
      run:
        working-directory: backend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests with pytest
      run: |
        pytest --cov=./ --cov-report=xml

    - name: Run security checks
      run: |
        pip install bandit safety
        bandit -r .
        safety check

    - name: Set up Cloud SDK
      if: github.ref == 'refs/heads/main' && matrix.python-version == '3.12'
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}

    - name: Build and push Docker image
      if: github.ref == 'refs/heads/main' && matrix.python-version == '3.12'
      run: |
        gcloud auth configure-docker
        docker buildx build --platform linux/amd64 -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/backend:${{ github.sha }} . --push

    - name: Deploy to Cloud Run
      if: github.ref == 'refs/heads/main' && matrix.python-version == '3.12'
      run: |
        gcloud run deploy backend \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/backend:${{ github.sha }} \
          --platform managed \
          --region europe-west4 \
          --port=8000 \
          --allow-unauthenticated

